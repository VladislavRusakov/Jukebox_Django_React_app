{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport YouTube from 'react-youtube';\nfunction Player({\n  state\n}) {\n  _s();\n  const [videoId, setVideoId] = React.useState('');\n  const [player, setPlayer] = React.useState(null);\n  React.useEffect(() => {\n    const playedRecord = state.find(record => record.isPlayed); // Changed: moved finding the played record inside the React.useEffect\n    if (playedRecord) {\n      const videoUrl = playedRecord.youtubeUrl;\n      const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/;\n      const match = videoUrl.match(regex);\n      const newVideoId = match ? match[1] : null;\n      setVideoId(newVideoId); // Changed: set videoId state based on regex match\n    }\n  }, [state]);\n  React.useEffect(() => {\n    if (videoId && !player) {\n      // Changed: check if player is not initialized\n      console.log('We are here');\n      window.onYouTubeIframeAPIReady = () => {\n        const newPlayer = new YT.Player('player', {\n          height: '200',\n          width: '350',\n          videoId: videoId,\n          events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange\n          }\n        });\n        setPlayer(newPlayer); // Changed: set player state with newPlayer\n      };\n      const tag = document.createElement('script');\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    } else if (player) {\n      player.loadVideoById(videoId); // Changed: load video by videoId if player exists\n    }\n  }, []);\n}\n_s(Player, \"9j8CXtR9dKVjxX6quLRN8gEpEvc=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","YouTube","Player","state","_s","videoId","setVideoId","useState","player","setPlayer","useEffect","playedRecord","find","record","isPlayed","videoUrl","youtubeUrl","regex","match","newVideoId","console","log","window","onYouTubeIframeAPIReady","newPlayer","YT","height","width","events","onPlayerReady","onPlayerStateChange","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","loadVideoById","_c","$RefreshReg$"],"sources":["E:/work/Jukebox/local_react_frontend/src/components/Player.js"],"sourcesContent":["import React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\n\r\nfunction Player({ state }) {\r\n    const [videoId, setVideoId] = React.useState('');\r\n    const [player, setPlayer] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        const playedRecord = state.find(record => record.isPlayed); // Changed: moved finding the played record inside the React.useEffect\r\n        if (playedRecord) {\r\n            const videoUrl = playedRecord.youtubeUrl;\r\n            const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/;\r\n            const match = videoUrl.match(regex);\r\n            const newVideoId = match ? match[1] : null;\r\n            setVideoId(newVideoId); // Changed: set videoId state based on regex match\r\n        }\r\n    }, [state]);\r\n\r\n    React.useEffect(() => {\r\n        if (videoId && !player) { // Changed: check if player is not initialized\r\n            console.log('We are here')\r\n            window.onYouTubeIframeAPIReady = () => {\r\n                const newPlayer = new YT.Player('player', {\r\n                    height: '200',\r\n                    width: '350',\r\n                    videoId: videoId,\r\n                    events: {\r\n                        'onReady': onPlayerReady,\r\n                        'onStateChange': onPlayerStateChange\r\n                    }\r\n                });\r\n                setPlayer(newPlayer); // Changed: set player state with newPlayer\r\n            };\r\n            const tag = document.createElement('script');\r\n            tag.src = \"https://www.youtube.com/iframe_api\";\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n        } else if (player) {\r\n            player.loadVideoById(videoId); // Changed: load video by videoId if player exists\r\n        }\r\n    },[]);\r\n\r\n\r\n}\r\n\r\nexport default Player;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,eAAe;AAGnC,SAASC,MAAMA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,KAAK,CAACO,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,KAAK,CAACO,QAAQ,CAAC,IAAI,CAAC;EAEhDP,KAAK,CAACU,SAAS,CAAC,MAAM;IAClB,MAAMC,YAAY,GAAGR,KAAK,CAACS,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC5D,IAAIH,YAAY,EAAE;MACd,MAAMI,QAAQ,GAAGJ,YAAY,CAACK,UAAU;MACxC,MAAMC,KAAK,GAAG,0EAA0E;MACxF,MAAMC,KAAK,GAAGH,QAAQ,CAACG,KAAK,CAACD,KAAK,CAAC;MACnC,MAAME,UAAU,GAAGD,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;MAC1CZ,UAAU,CAACa,UAAU,CAAC,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,CAAChB,KAAK,CAAC,CAAC;EAEXH,KAAK,CAACU,SAAS,CAAC,MAAM;IAClB,IAAIL,OAAO,IAAI,CAACG,MAAM,EAAE;MAAE;MACtBY,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BC,MAAM,CAACC,uBAAuB,GAAG,MAAM;QACnC,MAAMC,SAAS,GAAG,IAAIC,EAAE,CAACvB,MAAM,CAAC,QAAQ,EAAE;UACtCwB,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE,KAAK;UACZtB,OAAO,EAAEA,OAAO;UAChBuB,MAAM,EAAE;YACJ,SAAS,EAAEC,aAAa;YACxB,eAAe,EAAEC;UACrB;QACJ,CAAC,CAAC;QACFrB,SAAS,CAACe,SAAS,CAAC,CAAC,CAAC;MAC1B,CAAC;MACD,MAAMO,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC5CF,GAAG,CAACG,GAAG,GAAG,oCAAoC;MAC9C,MAAMC,cAAc,GAAGH,QAAQ,CAACI,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjED,cAAc,CAACE,UAAU,CAACC,YAAY,CAACP,GAAG,EAAEI,cAAc,CAAC;IAC/D,CAAC,MAAM,IAAI3B,MAAM,EAAE;MACfA,MAAM,CAAC+B,aAAa,CAAClC,OAAO,CAAC,CAAC,CAAC;IACnC;EACJ,CAAC,EAAC,EAAE,CAAC;AAGT;AAACD,EAAA,CAxCQF,MAAM;AAAAsC,EAAA,GAANtC,MAAM;AA0Cf,eAAeA,MAAM;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}