{"ast":null,"code":"var _jsxFileName = \"E:\\\\work\\\\Jukebox\\\\local_react_frontend\\\\src\\\\components\\\\Player.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Player({\n  state,\n  onPlayerReadyRef,\n  setVolume,\n  setIsPlaying,\n  setCurrentTime,\n  setDuration\n}) {\n  _s();\n  const playerRef = React.useRef(null);\n  const [videoId, setVideoId] = React.useState('');\n  const intervalRef = React.useRef(null); // Ref to store the interval ID\n\n  React.useEffect(() => {\n    const playedRecord = state.find(record => record.isPlayed);\n    if (playedRecord) {\n      const videoUrl = playedRecord.youtubeUrl;\n      const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/;\n      const match = videoUrl.match(regex);\n      const newVideoId = match ? match[1] : null;\n      setVideoId(newVideoId);\n\n      // Clear previous interval\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      // Reset states\n      setCurrentTime(0);\n      setIsPlaying(false);\n      setDuration(0);\n    }\n  }, [state, setCurrentTime, setIsPlaying, setDuration]);\n  const opts = {\n    height: '200',\n    width: '350',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  function onPlayerReady(event) {\n    playerRef.current = event.target;\n    if (onPlayerReadyRef) {\n      onPlayerReadyRef.current = event.target;\n    }\n    setVolume(event.target.getVolume());\n    setIsPlaying(event.target.getPlayerState() === 1);\n    setDuration(event.target.getDuration());\n\n    // Polling to update current time\n    intervalRef.current = setInterval(() => {\n      if (playerRef.current && playerRef.current.getCurrentTime) {\n        setCurrentTime(playerRef.current.getCurrentTime());\n      }\n    }, 1000);\n  }\n  function onPlayerStateChange(event) {\n    console.log('Player state change', event.data);\n    setIsPlaying(event.data === 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"youtube--player--container\",\n    id: \"player\",\n    style: {\n      visibility: 'hidden'\n    },\n    children: videoId && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: videoId,\n      opts: opts,\n      onReady: onPlayerReady,\n      onStateChange: onPlayerStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s(Player, \"lU1TebuafyNdRF1VEYfyqB17U4k=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","YouTube","jsxDEV","_jsxDEV","Player","state","onPlayerReadyRef","setVolume","setIsPlaying","setCurrentTime","setDuration","_s","playerRef","useRef","videoId","setVideoId","useState","intervalRef","useEffect","playedRecord","find","record","isPlayed","videoUrl","youtubeUrl","regex","match","newVideoId","current","clearInterval","opts","height","width","playerVars","autoplay","onPlayerReady","event","target","getVolume","getPlayerState","getDuration","setInterval","getCurrentTime","onPlayerStateChange","console","log","data","className","id","style","visibility","children","onReady","onStateChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/work/Jukebox/local_react_frontend/src/components/Player.js"],"sourcesContent":["import React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nfunction Player({ state, onPlayerReadyRef, setVolume, setIsPlaying, setCurrentTime, setDuration }) {\r\n    const playerRef = React.useRef(null);\r\n    const [videoId, setVideoId] = React.useState('');\r\n    const intervalRef = React.useRef(null); // Ref to store the interval ID\r\n\r\n    React.useEffect(() => {\r\n        const playedRecord = state.find(record => record.isPlayed);\r\n        if (playedRecord) {\r\n            const videoUrl = playedRecord.youtubeUrl;\r\n            const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/;\r\n            const match = videoUrl.match(regex);\r\n            const newVideoId = match ? match[1] : null;\r\n            setVideoId(newVideoId);\r\n\r\n            // Clear previous interval\r\n            if (intervalRef.current) {\r\n                clearInterval(intervalRef.current);\r\n            }\r\n\r\n            // Reset states\r\n            setCurrentTime(0);\r\n            setIsPlaying(false);\r\n            setDuration(0);\r\n        }\r\n    }, [state, setCurrentTime, setIsPlaying, setDuration]);\r\n\r\n    const opts = {\r\n        height: '200',\r\n        width: '350',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    function onPlayerReady(event) {\r\n        playerRef.current = event.target;\r\n        if (onPlayerReadyRef) {\r\n            onPlayerReadyRef.current = event.target;\r\n        }\r\n        setVolume(event.target.getVolume());\r\n        setIsPlaying(event.target.getPlayerState() === 1);\r\n        setDuration(event.target.getDuration());\r\n\r\n        // Polling to update current time\r\n        intervalRef.current = setInterval(() => {\r\n            if (playerRef.current && playerRef.current.getCurrentTime) {\r\n                setCurrentTime(playerRef.current.getCurrentTime());\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    function onPlayerStateChange(event) {\r\n        console.log('Player state change', event.data);\r\n        setIsPlaying(event.data === 1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"youtube--player--container\" id=\"player\" style={{ visibility: 'hidden' }}>\r\n            {videoId && (\r\n                <YouTube\r\n                    videoId={videoId}\r\n                    opts={opts}\r\n                    onReady={onPlayerReady}\r\n                    onStateChange={onPlayerStateChange}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Player;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}